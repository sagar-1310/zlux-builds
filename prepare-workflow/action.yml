name: "prepare workflow"
description: "This action helps build all the zlux plugins"
inputs:
  github-user:
    description: 'github user'
    required: false
  github-password:
    description: 'github password'
    required: false
  github-email:
    description: 'github email'
    required: false
  github-branch:
    description: 'repository branch'
    required: false

runs:
  using: "composite"
  steps:
    - name: 'process env vars'
      run: |
        # Sanitize envvars by (in order)
        # 1. remove comments (start with #); 
        # 2. remove blank lines
        sed '/^#/d' envvars.env | awk NF > envvars.env.new
        rm envvars.env
        mv envvars.env.new envvars.env
        cat envvars.env >> $GITHUB_ENV
      working-directory: ${{ github.action_path }}
      shell: bash
      
    - name: 'setup apt-get'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ant-contrib tart
      shell: bash
    
    - name: 'install mocha'
      run: |
        npm install mocha
      shell: bash
    
    - name: 'determine current branch or PR'
      run: |
        if [ -z ${{ github.event.pull_request.number }} ]
        then
          echo CURRENT_BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
        else
          echo CURRENT_BRANCH=PR-${{ github.event.pull_request.number }} >> $GITHUB_ENV
        fi
      shell: bash
    
    
    - name: 'export github username and email'
      run: |
        if [ -n "${{ inputs.github-user }}" ]
        then
          git config --global user.name ${{ inputs.github-user }}
          echo GITHUB_USER=${{ inputs.github-user }} >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.github-email }}" ]
        then
          git config --global user.email ${{ inputs.github-email }}
        fi
        if [ -n "${{ inputs.github-password }}" ]
        then
          echo GITHUB_PASSWORD=${{ inputs.github-password }} >> $GITHUB_ENV
        fi
        echo GITHUB_REPOSITORY=${{ github.repository }} >> $GITHUB_ENV
        
      shell: bash
    
    - name: 'get Zowe version'
      run: |
        git clone --branch v1.x/staging https://github.com/zowe/zowe-install-packaging.git
        ZOWE_VERSION=$(cat zowe-install-packaging/manifest.json.template  \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g')
        echo "ZOWE_VERSION=$ZOWE_VERSION" | tr -d ' ' >> $GITHUB_ENV
        rm -rf zowe-install-packaging
      shell: bash

    - name: 'set plugins path'
      run: |
        echo REPOSITORY_NAME=$GITHUB_REPOSITORY | sed 's/zowe\///' >> $GITHUB_ENV
        echo WORKING_DIR=/home/runner/work/"$REPOSITORY_NAME" >> $GITHUB_ENV
      shell: bash
    
