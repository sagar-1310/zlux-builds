name: "Build and Test core"
description: "This action helps build and test zlux-core"
inputs:
  zlux-app-manager:
    description: 'zlux-app-manager PR number'
    required: false
  zlux-app-server:
    description: 'zlux-app-server PR number'
    required: false
  zlux-build:
    description: 'zlux-build PR number'
    required: false
  zlux-platform:
    description: 'zlux-platform PR number'
    required: false
  zlux-server-framework:
    description: 'zlux-server-framework PR number'
    required: false
  zlux-shared:
    description: 'zlux-shared PR number'
    required: false
    
    

runs:
  using: "composite"
  steps:
    - name: 'checkout'
      run: |
        mkdir zlux && cd zlux
        git clone https://github.com/zowe/zlux-app-manager.git -b v3.x/staging
        git clone https://github.com/zowe/zlux-app-server.git -b v3.x/staging
        git clone https://github.com/zowe/zlux-build.git -b v3.x/staging
        git clone https://github.com/zowe/zlux-platform.git -b v3.x/staging
        git clone https://github.com/zowe/zlux-server-framework.git -b v3.x/staging
        git clone https://github.com/zowe/zlux-shared.git -b v3.x/staging
        
        if [ -n "${{ github.event.pull_request.number }}" ]
        then
          cd $REPOSITORY_NAME
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr
          git merge pr 
          cd ..
        fi
        if [ -n "${{ inputs.zlux-app-manager }}" ]
        then
          cd zlux-app-manager
          git fetch origin pull/${{ inputs.zlux-app-manager }}/head:pr
          git merge pr 
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.zlux-app-server }}" ]
        then
          cd zlux-app-server
          git fetch origin pull/${{ inputs.zlux-app-server }}/head:pr
          git merge pr
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.zlux-build }}" ]
        then
          cd zlux-build
          git fetch origin pull/${{ inputs.zlux-build }}/head:pr
          git merge pr
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.zlux-platform }}" ]
        then
          cd zlux-platform
          git fetch origin pull/${{ inputs.zlux-platform }}/head:pr
          git merge pr
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.zlux-server-framework }}" ]
        then
          cd zlux-server-framework
          git fetch origin pull/${{ inputs.zlux-server-framework }}/head:pr
          git merge pr
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.zlux-shared }}" ]
        then
          cd zlux-shared
          git fetch origin pull/${{ inputs.zlux-shared }}/head:pr
          git merge pr
          cd ..
          echo CUSTOM_PR=true >> $GITHUB_ENV
        fi
      shell: bash    
        
    - name: 'set version'
      run: |
        version=$(echo $ZOWE_VERSION | grep -o '[^-]*$')
        majorVersion=$(echo $version | cut -d. -f1)
        minorVersion=$(echo $version | cut -d. -f2)
        microVersion=$(echo $version | cut -d. -f3)
        cd zlux/zlux-build
        sed -i -e "s/MAJOR_VERSION=0/MAJOR_VERSION=${majorVersion}/" \
                 -e "s/MINOR_VERSION=8/MINOR_VERSION=${minorVersion}/" \
                 -e "s/REVISION=4/REVISION=${microVersion}/" \
                  version.properties
          echo "Set version to:"
          cat version.properties
          cd ../zlux-app-server
          export commit_hash=$(git rev-parse --short "$GITHUB_SHA")
          export current_timestamp=$(date +%s%3N)
          export zlux_version="${majorVersion}.${minorVersion}.${microVersion}"
          echo $commit_hash
          echo $current_timestamp
          sed -i -e "s|{{build\\.branch}}|v3.x/staging|g" \
                -e "s|{{build\\.number}}|${JFROG_CLI_BUILD_NUMBER}|g" \
                -e "s|{{build\\.commitHash}}|${commit_hash}|g" \
                -e "s|{{build\\.timestamp}}|${current_timestamp}|g" \
                -e "s|{{build\\.version}}|${ZOWE_VERSION}|g" \
               "manifest.yaml"
          echo "manifest is:"
          cat manifest.yaml
      shell: bash  
    
    - name: 'set system apps version'
      run: |
        cd zlux/zlux-app-manager/system-apps
        for app_folder in */; 
        do 
          cd $app_folder
          if [ -e "manifest.yaml" ]; then
            echo "In $app_folder"
            export commit_hash=$(git rev-parse --short "$GITHUB_SHA")
            export current_timestamp=$(date +%s%3N)
            sed -i -e "s|{{build\\.branch}}|v3.x/staging|g" \
                     -e "s|{{build\\.number}}|${JFROG_CLI_BUILD_NUMBER}|g" \
                     -e "s|{{build\\.commitHash}}|${commit_hash}|g" \
                     -e "s|{{build\\.timestamp}}|${current_timestamp}|g" \
                     "manifest.yaml"
            echo "manifest is:"
            cat manifest.yaml
          fi
          cd ..
        done
      shell: bash 

    - name: 'build'
      run: |
        cd zlux/zlux-build
        bash -c set -o pipefail && ant testing 2>&1 | grep -vE "^\s+\[exec\]\s+0\% compiling"
      shell: bash 

    - name: 'test'
      run: |
        if [ -n ${{ github.event.pull_request.number }} &&  "$REPOSITORY_NAME" != "zlux-app-server"]
        then
          cd dist
          packages=$(find ./${REPOSITORY_NAME} -name package.json | { grep -v node_modules || true; })
          for package in \$packages
          do
            sh -c "cd `dirname \$package` && npm run test --if-present"
          done
        fi
      shell: bash 
      
    - name: 'remove source'
      run: |
        cd zlux/zlux-build 
        ant -Dcapstone=../../dist removeSource
      shell: bash 
      
    - name: 'clone v2'
      run: | 
        mkdir clone && cd clone
        git clone https://github.com/zowe/zowe-install-packaging.git -b v2.x/master
        ZOWE_V2_VERSION=$(cat zowe-install-packaging/manifest.json.template  \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[", ]//g')
        ZLUX_CORE_PAX_V2=$(cat zowe-install-packaging/manifest.json.template  \
          | grep '"org.zowe.zlux.zlux-core": {' -A 10 \
          | grep '"artifact":' \
          | grep -m 1 '"artifact":' \
          | awk -F: '{ print $2 }' \
          | sed 's/[", ]//g' \
          | sed 's/\.pax$/.tar/')
        curl "https://zowe.jfrog.io/zowe/list/libs-snapshot-local/org/zowe/zlux/zlux-core/${ZOWE_V2_VERSION}-RC/${ZLUX_CORE_PAX_V2}" -k -o zlux.tar
        tar xpoUf zlux.tar 
        cd zlux-app-manager/system-apps
        echo "PWD is $PWD"
        for app_folder in */
        do 
          echo "copy from ${app_folder}web/"
          ls -ltr ${app_folder}
          echo "to ../../../zlux/zlux-app-manager/system-apps/${app_folder}web"
          ls -ltr ../../../zlux/zlux-app-manager/system-apps
          echo "destination:"
          ls -ltr ../../../
          ls -ltr ../../../zlux/zlux-app-manager/system-apps/${app_folder}
          cp -rvf ${app_folder}web/* ../../../zlux/zlux-app-manager/system-apps/${app_folder}web
        done
        cd ../..
        mv zlux-app-manager ../zlux/zlux-app-manager-v2
        cd ../zlux/zlux-app-manager-v2 && rm -rf bootstrap virtual-desktop/lib system-apps
        cd ../../zlux-app-manager/system-apps && find . -type f -name '*.map' -exec rm {} \;
      shell: bash
      
    - name: 'package'
      run: |
        chmod +x dist/zlux-build/*.sh
        cd dist
        tar cf ../zlux.tar -H ustar *
        cd ..
        git clone -b v3.x/master https://github.com/1000TurquoisePogs/zowe-install-packaging.git
        export MVD_HOME_DIR=$(pwd) 
        echo MVD_HOME_DIR=$(pwd) >> $GITHUB_ENV
      shell: bash
